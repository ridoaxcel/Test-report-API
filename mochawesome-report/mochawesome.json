{
  "stats": {
    "suites": 6,
    "tests": 18,
    "passes": 18,
    "pending": 0,
    "failures": 0,
    "start": "2024-05-01T00:19:12.145Z",
    "end": "2024-05-01T00:19:17.633Z",
    "duration": 5488,
    "testsRegistered": 18,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "a9f97907-88eb-4499-988c-d0004471ea07",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "b48e4355-8c21-4643-b334-4db069bf30ee",
          "title": "json-schema-traverse",
          "fullFile": "D:\\Pro Sigma mandiri\\Tugas\\Belajar API\\node_modules\\json-schema-traverse\\spec\\index.spec.js",
          "file": "\\node_modules\\json-schema-traverse\\spec\\index.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"json-schema-traverse\"",
              "fullTitle": "json-schema-traverse \"before each\" hook in \"json-schema-traverse\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "calls = [];",
              "err": {},
              "uuid": "174daeca-4b91-4b9f-a782-2550d429ea05",
              "parentUUID": "b48e4355-8c21-4643-b334-4db069bf30ee",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should traverse all keywords containing schemas recursively",
              "fullTitle": "json-schema-traverse should traverse all keywords containing schemas recursively",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var schema = require('./fixtures/schema').schema;\nvar expectedCalls = require('./fixtures/schema').expectedCalls;\ntraverse(schema, {cb: callback});\nassert.deepStrictEqual(calls, expectedCalls);",
              "err": {},
              "uuid": "5a056139-3586-487e-9afb-008ba1836c8d",
              "parentUUID": "b48e4355-8c21-4643-b334-4db069bf30ee",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "ca24406f-d148-4925-819e-b554df0b2fd2",
              "title": "Legacy v0.3.1 API",
              "fullFile": "D:\\Pro Sigma mandiri\\Tugas\\Belajar API\\node_modules\\json-schema-traverse\\spec\\index.spec.js",
              "file": "\\node_modules\\json-schema-traverse\\spec\\index.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should traverse all keywords containing schemas recursively",
                  "fullTitle": "json-schema-traverse Legacy v0.3.1 API should traverse all keywords containing schemas recursively",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var schema = require('./fixtures/schema').schema;\nvar expectedCalls = require('./fixtures/schema').expectedCalls;\ntraverse(schema, callback);\nassert.deepStrictEqual(calls, expectedCalls);",
                  "err": {},
                  "uuid": "0f94ebcf-69a4-4d08-8a53-e1d705e10cf2",
                  "parentUUID": "ca24406f-d148-4925-819e-b554df0b2fd2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work when an options object is provided",
                  "fullTitle": "json-schema-traverse Legacy v0.3.1 API should work when an options object is provided",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex\nvar schema = require('./fixtures/schema').schema;\nvar expectedCalls = require('./fixtures/schema').expectedCalls;\ntraverse(schema, {}, callback);\nassert.deepStrictEqual(calls, expectedCalls);",
                  "err": {},
                  "uuid": "55181082-e5fe-4438-89f4-2632e5d38682",
                  "parentUUID": "ca24406f-d148-4925-819e-b554df0b2fd2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0f94ebcf-69a4-4d08-8a53-e1d705e10cf2",
                "55181082-e5fe-4438-89f4-2632e5d38682"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3dc2bcd1-578f-4baf-9196-bc104904bb27",
              "title": "allKeys option",
              "fullFile": "D:\\Pro Sigma mandiri\\Tugas\\Belajar API\\node_modules\\json-schema-traverse\\spec\\index.spec.js",
              "file": "\\node_modules\\json-schema-traverse\\spec\\index.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should traverse objects with allKeys: true option",
                  "fullTitle": "json-schema-traverse allKeys option should traverse objects with allKeys: true option",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex\nvar expectedCalls = [\n  [schema, '', schema, undefined, undefined, undefined, undefined],\n  [schema.someObject, '/someObject', schema, '', 'someObject', schema, undefined]\n];\ntraverse(schema, {allKeys: true, cb: callback});\nassert.deepStrictEqual(calls, expectedCalls);",
                  "err": {},
                  "uuid": "4c520942-eb33-40b1-a9f0-322bf4ffc283",
                  "parentUUID": "3dc2bcd1-578f-4baf-9196-bc104904bb27",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should NOT traverse objects with allKeys: false option",
                  "fullTitle": "json-schema-traverse allKeys option should NOT traverse objects with allKeys: false option",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex\nvar expectedCalls = [\n  [schema, '', schema, undefined, undefined, undefined, undefined]\n];\ntraverse(schema, {allKeys: false, cb: callback});\nassert.deepStrictEqual(calls, expectedCalls);",
                  "err": {},
                  "uuid": "1ef994da-b67b-4adc-9cb7-6cadfd0292ae",
                  "parentUUID": "3dc2bcd1-578f-4baf-9196-bc104904bb27",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should NOT traverse objects without allKeys option",
                  "fullTitle": "json-schema-traverse allKeys option should NOT traverse objects without allKeys option",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex\nvar expectedCalls = [\n  [schema, '', schema, undefined, undefined, undefined, undefined]\n];\ntraverse(schema, {cb: callback});\nassert.deepStrictEqual(calls, expectedCalls);",
                  "err": {},
                  "uuid": "79bcb535-29c8-455e-a134-4c26fb6bbbe2",
                  "parentUUID": "3dc2bcd1-578f-4baf-9196-bc104904bb27",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should NOT travers objects in standard keywords which value is not a schema",
                  "fullTitle": "json-schema-traverse allKeys option should NOT travers objects in standard keywords which value is not a schema",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var schema2 = {\n  const: {foo: 'bar'},\n  enum: ['a', 'b'],\n  required: ['foo'],\n  another: {\n  },\n  patternProperties: {}, // will not traverse - no properties\n  dependencies: true, // will not traverse - invalid\n  properties: {\n    smaller: {\n      type: 'number'\n    },\n    larger: {\n      type: 'number',\n      minimum: {$data: '1/smaller'}\n    }\n  }\n};\n// schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex\nvar expectedCalls = [\n  [schema2, '', schema2, undefined, undefined, undefined, undefined],\n  [schema2.another, '/another', schema2, '', 'another', schema2, undefined],\n  [schema2.properties.smaller, '/properties/smaller', schema2, '', 'properties', schema2, 'smaller'],\n  [schema2.properties.larger, '/properties/larger', schema2, '', 'properties', schema2, 'larger'],\n];\ntraverse(schema2, {allKeys: true, cb: callback});\nassert.deepStrictEqual(calls, expectedCalls);",
                  "err": {},
                  "uuid": "2ca75fec-bed6-40bf-9997-1c0425b468cd",
                  "parentUUID": "3dc2bcd1-578f-4baf-9196-bc104904bb27",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4c520942-eb33-40b1-a9f0-322bf4ffc283",
                "1ef994da-b67b-4adc-9cb7-6cadfd0292ae",
                "79bcb535-29c8-455e-a134-4c26fb6bbbe2",
                "2ca75fec-bed6-40bf-9997-1c0425b468cd"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "368fef20-527a-4eea-b6e6-e47b1a2635cb",
              "title": "pre and post",
              "fullFile": "D:\\Pro Sigma mandiri\\Tugas\\Belajar API\\node_modules\\json-schema-traverse\\spec\\index.spec.js",
              "file": "\\node_modules\\json-schema-traverse\\spec\\index.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should traverse schema in pre-order",
                  "fullTitle": "json-schema-traverse pre and post should traverse schema in pre-order",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "traverse(schema, {cb: {pre}});\nvar expectedCalls = [\n  ['pre', schema, '', schema, undefined, undefined, undefined, undefined],\n  ['pre', schema.properties.name, '/properties/name', schema, '', 'properties', schema, 'name'],\n  ['pre', schema.properties.age, '/properties/age', schema, '', 'properties', schema, 'age'],\n];\nassert.deepStrictEqual(calls, expectedCalls);",
                  "err": {},
                  "uuid": "5eaf2ad8-7711-49b7-bbc3-7dac0777c3e4",
                  "parentUUID": "368fef20-527a-4eea-b6e6-e47b1a2635cb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should traverse schema in post-order",
                  "fullTitle": "json-schema-traverse pre and post should traverse schema in post-order",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "traverse(schema, {cb: {post}});\nvar expectedCalls = [\n  ['post', schema.properties.name, '/properties/name', schema, '', 'properties', schema, 'name'],\n  ['post', schema.properties.age, '/properties/age', schema, '', 'properties', schema, 'age'],\n  ['post', schema, '', schema, undefined, undefined, undefined, undefined],\n];\nassert.deepStrictEqual(calls, expectedCalls);",
                  "err": {},
                  "uuid": "5113cecb-fc53-4e97-96bf-45367ff56dfe",
                  "parentUUID": "368fef20-527a-4eea-b6e6-e47b1a2635cb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should traverse schema in pre- and post-order at the same time",
                  "fullTitle": "json-schema-traverse pre and post should traverse schema in pre- and post-order at the same time",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "traverse(schema, {cb: {pre, post}});\nvar expectedCalls = [\n  ['pre', schema, '', schema, undefined, undefined, undefined, undefined],\n  ['pre', schema.properties.name, '/properties/name', schema, '', 'properties', schema, 'name'],\n  ['post', schema.properties.name, '/properties/name', schema, '', 'properties', schema, 'name'],\n  ['pre', schema.properties.age, '/properties/age', schema, '', 'properties', schema, 'age'],\n  ['post', schema.properties.age, '/properties/age', schema, '', 'properties', schema, 'age'],\n  ['post', schema, '', schema, undefined, undefined, undefined, undefined],\n];\nassert.deepStrictEqual(calls, expectedCalls);",
                  "err": {},
                  "uuid": "29688eeb-d83a-4ac2-bc5d-59f56d1491d5",
                  "parentUUID": "368fef20-527a-4eea-b6e6-e47b1a2635cb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5eaf2ad8-7711-49b7-bbc3-7dac0777c3e4",
                "5113cecb-fc53-4e97-96bf-45367ff56dfe",
                "29688eeb-d83a-4ac2-bc5d-59f56d1491d5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [
            "5a056139-3586-487e-9afb-008ba1836c8d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "0584ed63-6933-4c4f-be39-a630e50edffb",
          "title": "Testing Api get,post,put,delete",
          "fullFile": "D:\\Pro Sigma mandiri\\Tugas\\Belajar API\\post_api.spec.js",
          "file": "\\post_api.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Judul produk 1 : His mother had always taught him",
              "fullTitle": "Testing Api get,post,put,delete Judul produk 1 : His mother had always taught him",
              "timedOut": false,
              "duration": 793,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request.get('/posts/1')\nexpect(res.body.title).to.equal('His mother had always taught him')",
              "err": {},
              "uuid": "4e880d58-4f93-4afc-9d37-8c80c042085a",
              "parentUUID": "0584ed63-6933-4c4f-be39-a630e50edffb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Judul produk : Data baru input",
              "fullTitle": "Testing Api get,post,put,delete Judul produk : Data baru input",
              "timedOut": false,
              "duration": 632,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request.post('/posts/add').send(dataInput)\nexpect(res.body.title).to.equal('Data baru input')",
              "err": {},
              "uuid": "a826f54e-93cb-44d4-9d70-5bb7e99440d5",
              "parentUUID": "0584ed63-6933-4c4f-be39-a630e50edffb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Judul produk 1 : Data ini berubah",
              "fullTitle": "Testing Api get,post,put,delete Judul produk 1 : Data ini berubah",
              "timedOut": false,
              "duration": 638,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request.put('/posts/1').send(dataUbah)\nexpect(res.body.title).to.equal('Data ini berubah')",
              "err": {},
              "uuid": "c23e070b-920c-40a1-ab35-7a311da35a16",
              "parentUUID": "0584ed63-6933-4c4f-be39-a630e50edffb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "produk 1 : Validasi data yang dihapus",
              "fullTitle": "Testing Api get,post,put,delete produk 1 : Validasi data yang dihapus",
              "timedOut": false,
              "duration": 625,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request.delete('/posts/1').expect(200)",
              "err": {},
              "uuid": "af4c08b9-928b-4eaf-8752-5e4c1b43b50a",
              "parentUUID": "0584ed63-6933-4c4f-be39-a630e50edffb",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "4e880d58-4f93-4afc-9d37-8c80c042085a",
            "a826f54e-93cb-44d4-9d70-5bb7e99440d5",
            "c23e070b-920c-40a1-ab35-7a311da35a16",
            "af4c08b9-928b-4eaf-8752-5e4c1b43b50a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2688,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "0d4da9d9-4b56-4323-b0dc-047ae066df99",
          "title": "Validasi data dan tipe data",
          "fullFile": "D:\\Pro Sigma mandiri\\Tugas\\Belajar API\\post_api.spec.js",
          "file": "\\post_api.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "api all product test get menggunakan json schema",
              "fullTitle": "Validasi data dan tipe data api all product test get menggunakan json schema",
              "timedOut": false,
              "duration": 786,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request.get('/posts')\nexpect(res.body).to.be.jsonSchema(allPost);",
              "err": {},
              "uuid": "89f7de4c-6741-4496-ac44-92176911f48e",
              "parentUUID": "0d4da9d9-4b56-4323-b0dc-047ae066df99",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "api product test get menggunakan json schema",
              "fullTitle": "Validasi data dan tipe data api product test get menggunakan json schema",
              "timedOut": false,
              "duration": 736,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request.get('/posts/2')\nexpect(res.body).to.be.jsonSchema(post);",
              "err": {},
              "uuid": "df34c3a8-9aaf-4300-8a79-862ce48de88c",
              "parentUUID": "0d4da9d9-4b56-4323-b0dc-047ae066df99",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "api product test post menggunakan json schema",
              "fullTitle": "Validasi data dan tipe data api product test post menggunakan json schema",
              "timedOut": false,
              "duration": 601,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request.post('/posts/add').send(dataInput)\nexpect(res.body).to.be.jsonSchema(post);",
              "err": {},
              "uuid": "9660f845-13ab-4d41-9203-2531df464a75",
              "parentUUID": "0d4da9d9-4b56-4323-b0dc-047ae066df99",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "api product test put menggunakan json schema",
              "fullTitle": "Validasi data dan tipe data api product test put menggunakan json schema",
              "timedOut": false,
              "duration": 634,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await request.put('/posts/1').send(dataUbah)\nexpect(res.body).to.be.jsonSchema(post);",
              "err": {},
              "uuid": "052cfaa3-b311-46fa-a436-2b4f7ff2fd2b",
              "parentUUID": "0d4da9d9-4b56-4323-b0dc-047ae066df99",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "89f7de4c-6741-4496-ac44-92176911f48e",
            "df34c3a8-9aaf-4300-8a79-862ce48de88c",
            "9660f845-13ab-4d41-9203-2531df464a75",
            "052cfaa3-b311-46fa-a436-2b4f7ff2fd2b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2757,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.4.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "endpoint": "https://demo.reportportal.io/api/v1",
        "apiKey": "Report-portal-testing-api_exY7fHviSZifCsINKtHyX11HgzDZ8hO_08MpY9XhkIG-hGoie1drEvqD-iQzLCsm",
        "project": "ridoaxcel_personal",
        "launch": "Script Automation Api Testing Dari Mocha"
      },
      "version": "6.2.0"
    }
  }
}